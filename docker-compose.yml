services:
  db:
    image: mongo
    restart: always
    networks:
      - default
    env_file:
      - .env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${DB_USER?Variable not set}
      - MONGO_INITDB_ROOT_PASSWORD=${DB_PASSWORD?Variable not set}
      - MONGO_INITDB_DATABASE=${DB_DATABASE?Variable not set}

  mongo-express:
    image: mongo-express:latest
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${DB_USER?Variable not set}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${DB_PASSWORD?Variable not set}
      - ME_CONFIG_MONGODB_SERVER=db
      - ME_CONFIG_BASICAUTH=false
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-mongo-express-http.rule=Host(`mongo-express.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-mongo-express-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME?Variable not set}-mongo-express-http.middlewares=https-redirect
      - traefik.http.routers.${STACK_NAME?Variable not set}-mongo-express-https.rule=Host(`mongo-express.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-mongo-express-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-mongo-express-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-mongo-express-https.tls.certresolver=le
      - traefik.http.services.${STACK_NAME?Variable not set}-mongo-express.loadbalancer.server.port=8081
    
  backend:
    image: ${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      - db
    env_file:
      - .env
    build:
      context: ./backend
      args:
        INSTALL_DEV: false
    platform: linux/amd64
    environment:
      - DOMAIN=${DOMAIN}
      - PROJECT_NAME=${PROJECT_NAME}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - DB_SCHEME=${DB_SCHEME}
      - DB_HOST=db
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - SENTRY_DSN=${SENTRY_DSN}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=(Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)) && (PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`))
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.rule=(Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)) && (PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`))
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls.certresolver=le
      # Define Traefik Middleware to handle domain with and without "www" to redirect to only one
      - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.regex=^http(s)?://www.(${DOMAIN?Variable not set})/(.*)
      # Redirect a domain with www to non-www
      - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.replacement=http$${1}://${DOMAIN?Variable not set}/$${3}
      # Enable www redirection for HTTP and HTTPS
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.middlewares=https-redirect,${STACK_NAME?Variable not set}-www-redirect
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.middlewares=${STACK_NAME?Variable not set}-www-redirect

  frontend:
    image: '${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - traefik-public
      - default
    build:
      context: ./frontend
      args:
        - VITE_API_URL=https://${DOMAIN?Variable not set}
        - NODE_ENV=production
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=80
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.tls.certresolver=le
      # Enable www redirection for HTTP and HTTPS
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.middlewares=${STACK_NAME?Variable not set}-www-redirect
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.middlewares=https-redirect,${STACK_NAME?Variable not set}-www-redirect

networks:
  traefik-public:
    # Allow setting it to false for testing
    external: true
